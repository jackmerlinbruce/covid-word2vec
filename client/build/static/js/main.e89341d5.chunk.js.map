{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","input","padding","spacing","paddingLeft","paddingTop","backgroundColor","width","position","top","zIndex","button","result","color","height","borderRadius","history","cursor","background","App","classes","useState","query","setQuery","results","setResults","React","checked","setChecked","disabled","setDisabled","animationDelay","animationDelays","setAnimationDelays","colorScale","setHistory","cScale","scaleLinear","domain","extent","r","dist","range","oScale","getWords","a","map","i","error","api","Axios","get","then","res","setTimeout","data","length","handleHistory","word","newHistory","shift","push","console","log","useEffect","className","Container","maxWidth","Typography","variant","gutterBottom","TextField","id","label","onInput","e","target","value","Button","onClick","Zoom","in","style","transitionDelay","Chip","innerText","onDelete","url","window","open","openGoogleScholar","parentElement","firstChild","deleteIcon","h","opacity","fontWeight","toLowerCase","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e89341d5.chunk.js","sourcesContent":["import './App.css'\nimport React, { useState, useEffect } from 'react'\nimport Axios from 'axios'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Chip from '@material-ui/core/Chip'\nimport SearchIcon from '@material-ui/icons/Search'\nimport Zoom from '@material-ui/core/Zoom'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport { scaleLinear } from 'd3-scale'\nimport { extent } from 'd3-array'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: '0',\n        // background: 'black',\n        '& > *': {\n            // margin: theme.spacing(1),\n            // width: '25ch'\n        }\n    },\n    input: {\n        padding: theme.spacing(1),\n        paddingLeft: '0px',\n        paddingTop: '30px',\n        backgroundColor: 'white',\n        width: '100%',\n        position: 'sticky',\n        top: '0px',\n        zIndex: 1000\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n    result: {\n        color: '#263238',\n        padding: '15px',\n        // minWidth: '200px',\n        width: 552 / 3 + 'px',\n        height: '70px',\n        borderRadius: '0px',\n        '&:hover': {}\n    },\n    history: {\n        '&:hover': {\n            color: '#1e88e5',\n            cursor: 'pointer',\n            background: 'none',\n            backgroundColor: 'none'\n        }\n    }\n}))\n\nfunction App() {\n    const classes = useStyles()\n    const [query, setQuery] = useState('antimalarial')\n    const [results, setResults] = useState([])\n    const [checked, setChecked] = React.useState(true)\n    const [disabled, setDisabled] = React.useState(false)\n    const [animationDelay, setAnimationDelay] = React.useState(10)\n    const [animationDelays, setAnimationDelays] = React.useState([])\n    const [colorScale, setColorScale] = React.useState(['#e3f2fd', '#1e88e5'])\n    const [history, setHistory] = React.useState(['-', '-', '-', '-'])\n\n    const cScale = scaleLinear()\n        .domain(extent(results, r => r.dist))\n        .range(colorScale)\n\n    const oScale = scaleLinear()\n        .domain([0, 2])\n        .range([0.3, 1])\n\n    const getWords = async query => {\n        setChecked(false)\n        setDisabled(true)\n        try {\n            setAnimationDelays(results.map((r, i) => i * 0))\n        } catch (error) {\n            setAnimationDelays([])\n            setHistory([])\n        }\n        const api = `http://localhost:8080?word=${query}&n=21`\n        Axios.get(api).then(res => {\n            setTimeout(() => {\n                setChecked(checked)\n                setDisabled(false)\n            }, res.data.length * animationDelay)\n            setResults(res.data)\n            try {\n                setAnimationDelays(res.data.map((r, i) => i * animationDelay))\n            } catch (error) {\n                setAnimationDelays([])\n                setHistory([])\n            }\n        })\n        handleHistory(query)\n    }\n\n    const handleHistory = word => {\n        let newHistory = history\n        if (newHistory.length > history.length - 1) {\n            newHistory.shift()\n        }\n        newHistory.push(word)\n        setHistory(newHistory)\n        console.log(history)\n    }\n\n    const openGoogleScholar = word => {\n        let url =\n            'https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=%22' +\n            word +\n            '%22+covid+coronavirus&btnG='\n        // let url = `https://www.google.com/search?&q=%22${word}%22+covid+coronavirus&oq=%22test%22+covid+coronavirus`\n        window.open(url, '_blank')\n    }\n\n    useEffect(() => {\n        getWords(query)\n    }, [])\n\n    return (\n        <div className=\"App\" className={classes.root}>\n            <Container maxWidth=\"sm\">\n                <Typography variant=\"h1\" gutterBottom>\n                    COVID-19 Explorer\n                </Typography>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    This was created using the Kaggle corpus of Covid19\n                    documents.\n                </Typography>\n\n                <br></br>\n\n                <TextField\n                    className={classes.input}\n                    id=\"standard-basic\"\n                    label=\"Words relating to...\"\n                    onInput={e => setQuery(e.target.value)}\n                    value={query}\n                />\n\n                <br></br>\n\n                <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    onClick={() => getWords(query)}\n                    disabled={disabled}\n                >\n                    Search\n                </Button>\n\n                <br></br>\n\n                {results.length\n                    ? results.map((r, i) => {\n                          let delay = i * animationDelay + 'ms'\n                          return (\n                              <>\n                                  <Zoom\n                                      in={checked}\n                                      style={{\n                                          transitionDelay: animationDelays[i]\n                                      }}\n                                  >\n                                      <Chip\n                                          className={classes.result}\n                                          label={r.word}\n                                          onClick={e => {\n                                              getWords(e.target.innerText)\n                                              setQuery(e.target.innerText)\n                                          }}\n                                          onDelete={e =>\n                                              openGoogleScholar(\n                                                  e.target.parentElement\n                                                      .firstChild.innerText\n                                              )\n                                          }\n                                          deleteIcon={<SearchIcon />}\n                                          style={{\n                                              backgroundColor: cScale(r.dist)\n                                          }}\n                                      />\n                                  </Zoom>\n                              </>\n                          )\n                      })\n                    : null}\n\n                <br></br>\n\n                {history.map((h, i) => {\n                    return (\n                        <Button\n                            className={classes.history}\n                            style={{\n                                opacity: oScale(i),\n                                fontWeight: i == history.length - 1 ? 700 : 400\n                            }}\n                            onClick={e => {\n                                getWords(e.target.innerText.toLowerCase())\n                                setQuery(e.target.innerText.toLowerCase())\n                            }}\n                            disabled={disabled}\n                        >\n                            {h}\n                        </Button>\n                    )\n                })}\n\n                <br></br>\n\n                <Typography variant=\"h2\" gutterBottom>\n                    How does this work?\n                </Typography>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                    No single researcher has the time to read through all the\n                    COVID-19 literature out there. This applet squashes down all\n                    47,000 COVID-19 research papers and then looks at how those\n                    different words are connected. <br />\n                    <br /> It's quite possible there may be connections that\n                    exist within the corpus that are not apparent to the\n                    researchers. This applet allows reveals some of those\n                    connections. <br />\n                    <br /> This applet is not intended to be a miracle cure, but\n                    rather a gentle guide to aid snowed under researchers.\n                    Perhaps there is a treatment compound you haven't considered\n                    yet?\n                </Typography>\n            </Container>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'typeface-roboto'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}